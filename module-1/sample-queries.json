//  Let's store the sample inside a stored function to ease reuse (step 3)
.create-or-alter function sampleTelemetry() {
    //  Paste the JSON array sample and cast it as dynamic type
    dynamic(
        [
            {
                "x-opt-sequence-number": 6231,
                "x-opt-enqueued-time": "2020-05-14T17:09:06.0310000Z",
                "messageTimestamp": "2020-05-14T17:09:06.0188392Z",
                "x-opt-offset": "30077767056",
                "gatewayId": "179e29cb",
                "messageId": "8959d98e-7d0f-4b17-9cd9-9d2ee34ba1b7",
                "events": [
                    {
                        "eventTimestamp": "2020-05-14T17:08:37.1554152Z",
                        "measurement": {
                            "coordinates": [
                                "-70.776509345465143",
                                "46.826326824971233"
                            ],
                            "type": "Point"
                        },
                        "droneId": "1.2.21;a70ca461",
                        "device": "GPS"
                    },
                    {
                        "eventTimestamp": "2020-05-14T17:08:39.9151463Z",
                        "measurement": {
                            "coordinates": [
                                "-70.7729063607642",
                                "46.851425905904314"
                            ],
                            "type": "Point"
                        },
                        "droneId": "1.2.19;40110cc2",
                        "device": "GPS"
                    },
                    {
                        "eventTimestamp": "2020-05-14T17:08:48.0100673Z",
                        "measurement": "45.718312718447933",
                        "droneId": "1.2.19;6460dae6",
                        "device": "internal-temperature"
                    },
                    {
                        "eventTimestamp": "2020-05-14T17:08:48.0100697Z",
                        "measurement": "46.325914126748579",
                        "droneId": "1.2.20;64f1b7b5",
                        "device": "internal-temperature"
                    }
                ]
            },
            {
                "x-opt-sequence-number": 6230,
                "x-opt-enqueued-time": "2020-05-14T17:09:05.0780000Z",
                "messageTimestamp": "2020-05-14T17:09:05.0670422Z",
                "x-opt-offset": "30079282320",
                "gatewayId": "ae75c48a",
                "messageId": "3760d76e-7d53-4ea5-a331-875c27a5f527",
                "events": [
                    {
                        "eventTimestamp": "2020-05-14T17:08:42.1159028Z",
                        "measurement": {
                            "coordinates": [
                                "-70.514198199896143",
                                "46.939603486320728"
                            ],
                            "type": "Point"
                        },
                        "droneId": "1.2.19;df12e8f6",
                        "device": "GPS"
                    },
                    {
                        "eventTimestamp": "2020-05-14T17:08:42.3204442Z",
                        "measurement": {
                            "coordinates": [
                                "-70.522095868648279",
                                "46.932906012871825"
                            ],
                            "type": "Point"
                        },
                        "droneId": "1.2.20;ccd957c8",
                        "device": "GPS"
                    },
                    {
                        "eventTimestamp": "2020-05-14T17:08:48.0433290Z",
                        "measurement": "45.988745098186243",
                        "droneId": "1.2.20;abb2fb5e",
                        "device": "internal-temperature"
                    },
                    {
                        "eventTimestamp": "2020-05-14T17:08:48.0433317Z",
                        "measurement": "46.182714785799085",
                        "droneId": "1.2.20;39fde137",
                        "device": "internal-temperature"
                    },
                    {
                        "eventTimestamp": "2020-05-14T17:08:48.0433339Z",
                        "measurement": "46.523741308533445",
                        "droneId": "1.2.21;defee675",
                        "device": "internal-temperature"
                    }
                ]
            }
        ]
    )
}

//  Test function
print sampleTelemetry()

//  Explode each gateway message on its row (step 4)
print document=sampleTelemetry()
| mv-expand document

//  Strong type each message (step 5)
print document=sampleTelemetry()
//  Explode by message gateway
| mv-expand document
//  Project strong type message meta data
| project gatewayId=tostring(document.gatewayId),
    messageId=tostring(document.messageId),
    messageTimestamp=todatetime(document.messageTimestamp),
    hubSequenceNumber=toint(document['x-opt-sequence-number']),
    hubEnqueudTime=todatetime(document['x-opt-enqueued-time']),
    hubOffset=toint(document['x-opt-offset']),
    //  Keep events in JSON format / dynamic type
    events=document.events

//  Explode each drone event on its own row and extract it fields (step 6 & 7)
print document=sampleTelemetry()
//  Explode by message gateway
| mv-expand document
//  Project strong type message meta data
| project gatewayId=tostring(document.gatewayId),
    messageId=tostring(document.messageId),
    messageTimestamp=todatetime(document.messageTimestamp),
    hubSequenceNumber=toint(document['x-opt-sequence-number']),
    hubEnqueudTime=todatetime(document['x-opt-enqueued-time']),
    hubOffset=toint(document['x-opt-offset']),
    //  Keep events in JSON format / dynamic type
    events=document.events
//  Explode each event to a different record
| mv-expand events
//  Project strong type event meta data
| extend eventTimestamp=todatetime(events.eventTimestamp)
| extend droneId=tostring(events.droneId)
| extend device=tostring(events.device)
//  Keep the specific of the device measurement in JSON / dynamic
| extend measurement=events.measurement
//  Remove the events dynamic
| project-away events

//  Parse drone id (step 8)
print droneId="1.2.19;df12e8f6"
| parse droneId with droneVersion ";" droneId

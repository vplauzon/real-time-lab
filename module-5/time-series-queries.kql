//  Compare a few drones' internal temperatures
//  It seems to be mostly noise ; hard to analyse the difference
//  (step 1)
let sampleDroneIds =
    telemetry
    //  Look for drones that have recently pushed telemetry
    | where eventTimestamp > ago(1m)
    | where device=="internal-temperature"
    | distinct droneId
    | sample 4;
sampleDroneIds
| join kind=inner telemetry on droneId
| where device=="internal-temperature"
| project eventTimestamp, temperature, droneId, device
| render timechart

//  Find how many drones where the internal temperature device failed
//  Let's find the drones that had an internal temperature telemetry in
//  the last 2 minutes
//  (step 2)
let workingDroneIds =
    telemetry
    | where device=="internal-temperature"
    | where eventTimestamp > ago(2m)
    | distinct droneId;
//  Now, let's find the drones having other telemetries but no internal temperatures
telemetry
| where eventTimestamp > ago(2m)
| join kind=leftanti workingDroneIds on droneId
| distinct droneId
| count

//  Let's encode that into a function for reuse in this module
.create-or-alter function internalTemperatureStatus(){
    //  Find the working drones
    let workingDroneIds =
        telemetry
        | where device=="internal-temperature"
        | where eventTimestamp > ago(2m)
        | distinct droneId;
    let extendedTelemetry =
        telemetry
        | where eventTimestamp > ago(2m)
        | distinct droneId
        | join kind=leftouter workingDroneIds on droneId
        | extend isInternalTemperatureWorking=not(droneId1=="")
        | project droneId, isInternalTemperatureWorking;
    extendedTelemetry
}

//  Understand the schema of the table returned by the function
internalTemperatureStatus()
| getschema

//  Let's plot the internal temperature for a few failed sensors
//  We need the time range of the series
//  (step 3)
let minTime = toscalar(telemetry
    | summarize min(eventTimestamp));
let maxTime = toscalar(telemetry
    | summarize max(eventTimestamp));
internalTemperatureStatus()
| where isInternalTemperatureWorking==false
//  Sample on the left-hand table, so the left-hand table is smaller in the join
| sample 5
| join kind=inner telemetry on droneId
| where device=="internal-temperature"
| make-series temperature=avg(temperature) default=double(null) on eventTimestamp in range(minTime, maxTime, 1m) by droneId
| render timechart
//  This confirms the assumption the sensor first gives lower readings before snapping

//  Can we detect a snapped sensor using linear fit?
internalTemperatureStatus()
| join kind=inner telemetry on droneId
| where device=="internal-temperature"
| summarize temperature=avg(temperature) by droneId, isInternalTemperatureWorking, eventTimestamp=bin(eventTimestamp, 1m)
| order by droneId, eventTimestamp asc
| summarize temperature=make_list(temperature) by droneId, isInternalTemperatureWorking
| extend fit = series_fit_line_dynamic(temperature)
| project slope=todouble(fit.slope), isInternalTemperatureWorking
| project slope, isInternalTemperatureWorking
| render scatterchart
//  That discriminate quite nicely

//  Can we detect a snapped sensor using 2 segment linear regression?
//  Let's look at the 2 segment slopes against the predicate
internalTemperatureStatus()
| join kind=inner telemetry on droneId
| where device=="internal-temperature"
//  Here we build the series one-by-one instead of using make-series
//  This is because each series have a different length and series_fit_2lines_dynamic doesn't
//  work with null values
| summarize temperature=avg(temperature) by droneId, isInternalTemperatureWorking, eventTimestamp=bin(eventTimestamp, 1m)
//  We need the series to be ordered in time
| order by droneId, eventTimestamp asc
| summarize temperature=make_list(temperature) by droneId, isInternalTemperatureWorking
//  We fit each series to 2 lines
| extend fit = series_fit_2lines_dynamic(temperature)
| project rightSlope=todouble(fit.right.slope), isInternalTemperatureWorking
| project rightSlope, isInternalTemperatureWorking
| render scatterchart
//  It doesn't seem to discriminate well

//  Let's try with anomaly detection
internalTemperatureStatus()
| where isInternalTemperatureWorking==false
| sample 5
| join kind=inner telemetry on droneId
| where device=="internal-temperature"
| summarize temperature=avg(temperature) by droneId, isInternalTemperatureWorking, eventTimestamp=bin(eventTimestamp, 1m)
| order by droneId, eventTimestamp asc
| summarize temperature=make_list(temperature), eventTimestamp=make_list(eventTimestamp) by droneId, isInternalTemperatureWorking
| extend (flag, score) = series_decompose_anomalies(temperature)
| project eventTimestamp, temperature, flag, droneId
| render anomalychart with (anomalycolumns=flag)
//  That also seem to discriminate nicely

